/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package pt.unl.fct.di.pedroalves.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DECL = 5;
  /** RegularExpression Id. */
  int IN = 6;
  /** RegularExpression Id. */
  int NEW = 7;
  /** RegularExpression Id. */
  int END = 8;
  /** RegularExpression Id. */
  int TRUE = 9;
  /** RegularExpression Id. */
  int FALSE = 10;
  /** RegularExpression Id. */
  int PRINT = 11;
  /** RegularExpression Id. */
  int PRINTLN = 12;
  /** RegularExpression Id. */
  int IF = 13;
  /** RegularExpression Id. */
  int THEN = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int WHILE = 16;
  /** RegularExpression Id. */
  int DO = 17;
  /** RegularExpression Id. */
  int FUN = 18;
  /** RegularExpression Id. */
  int INT = 19;
  /** RegularExpression Id. */
  int BOOL = 20;
  /** RegularExpression Id. */
  int REF = 21;
  /** RegularExpression Id. */
  int CMD = 22;
  /** RegularExpression Id. */
  int Id = 23;
  /** RegularExpression Id. */
  int Num = 24;
  /** RegularExpression Id. */
  int LPAR = 25;
  /** RegularExpression Id. */
  int RPAR = 26;
  /** RegularExpression Id. */
  int ADD_OP = 27;
  /** RegularExpression Id. */
  int SUB_OP = 28;
  /** RegularExpression Id. */
  int MUL_OP = 29;
  /** RegularExpression Id. */
  int DIV_OP = 30;
  /** RegularExpression Id. */
  int GREATER = 31;
  /** RegularExpression Id. */
  int LESS = 32;
  /** RegularExpression Id. */
  int EQUALS = 33;
  /** RegularExpression Id. */
  int GE = 34;
  /** RegularExpression Id. */
  int LE = 35;
  /** RegularExpression Id. */
  int NOT_EQUAL = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int NOT = 39;
  /** RegularExpression Id. */
  int EQUALS_DEF = 40;
  /** RegularExpression Id. */
  int ASSIGN = 41;
  /** RegularExpression Id. */
  int DEREF = 42;
  /** RegularExpression Id. */
  int EXP_END = 43;
  /** RegularExpression Id. */
  int EXP_SEP = 44;
  /** RegularExpression Id. */
  int ARROW = 45;
  /** RegularExpression Id. */
  int COMMA = 46;
  /** RegularExpression Id. */
  int COLON = 47;
  /** RegularExpression Id. */
  int BRACKET_L = 48;
  /** RegularExpression Id. */
  int BRACKET_R = 49;
  /** RegularExpression Id. */
  int DOT = 50;
  /** RegularExpression Id. */
  int QUESTION_MARK = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"decl\"",
    "\"in\"",
    "\"new\"",
    "\"end\"",
    "\"true\"",
    "\"false\"",
    "\"print\"",
    "\"println\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"fun\"",
    "\"int\"",
    "\"bool\"",
    "\"ref\"",
    "\"cmd\"",
    "<Id>",
    "<Num>",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"~\"",
    "\"=\"",
    "\":=\"",
    "\"!\"",
    "\";;\"",
    "\";\"",
    "\"=>\"",
    "\",\"",
    "\":\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\"?\"",
  };

}
