/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package pt.unl.fct.di.pedroalves.parser;

import java.util.LinkedList;

import pt.unl.fct.di.pedroalves.ast.*;
import pt.unl.fct.di.pedroalves.type.*;

public class Parser implements ParserConstants {

  static final public ASTNode Start() throws ParseException {ASTNode e;
    e = SExp();
    jj_consume_token(EXP_END);
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SExp() throws ParseException {ASTNode e1, e2;
    e1 = LAss();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXP_SEP:{
      jj_consume_token(EXP_SEP);
      e2 = SExp();
{if ("" != null) return new ASTComposite(e1,e2);}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LAss() throws ParseException {ASTNode e1, e2;
        Token t;
    e1 = LExp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      e2 = LExp();
{if ("" != null) return new ASTAssign(e1,e2);}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LExp() throws ParseException {ASTNode c, d;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECL:
    case NEW:
    case TRUE:
    case FALSE:
    case IF:
    case WHILE:
    case FUN:
    case Id:
    case Num:
    case LPAR:
    case SUB_OP:
    case NOT:
    case DEREF:
    case BRACKET_L:{
      c = LTerm();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        jj_consume_token(OR);
        d = LExp();
{if ("" != null) return new ASTOr(c,d);}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
{if ("" != null) return c;}
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      c = LExp();
{if ("" != null) return new ASTPrint(c);}
      break;
      }
    case PRINTLN:{
      jj_consume_token(PRINTLN);
      c = LExp();
{if ("" != null) return new ASTPrint(c,true);}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LTerm() throws ParseException {ASTNode e, c;
    e = LFact();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      c = LTerm();
{if ("" != null) return new ASTAnd(e,c);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LFact() throws ParseException {ASTNode e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECL:
    case NEW:
    case TRUE:
    case FALSE:
    case IF:
    case WHILE:
    case FUN:
    case Id:
    case Num:
    case LPAR:
    case SUB_OP:
    case DEREF:
    case BRACKET_L:{
      e = LCmp();
{if ("" != null) return e;}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      e = LFact();
{if ("" != null) return new ASTNot(e);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LCmp() throws ParseException {ASTNode e1, e2;
    e1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GREATER:
    case LESS:
    case EQUALS:
    case GE:
    case LE:
    case NOT_EQUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GREATER:{
        jj_consume_token(GREATER);
        e2 = Exp();
{if ("" != null) return new ASTGreater(e1,e2);}
        break;
        }
      case LESS:{
        jj_consume_token(LESS);
        e2 = Exp();
{if ("" != null) return new ASTLess(e1,e2);}
        break;
        }
      case EQUALS:{
        jj_consume_token(EQUALS);
        e2 = Exp();
{if ("" != null) return new ASTEquals(e1,e2);}
        break;
        }
      case NOT_EQUAL:{
        jj_consume_token(NOT_EQUAL);
        e2 = Exp();
{if ("" != null) return new ASTNotEqual(e1,e2);}
        break;
        }
      case GE:{
        jj_consume_token(GE);
        e2 = Exp();
{if ("" != null) return new ASTGreaterEqual(e1,e2);}
        break;
        }
      case LE:{
        jj_consume_token(LE);
        e2 = Exp();
{if ("" != null) return new ASTLessEqual(e1,e2);}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {ASTNode t,e;
    t = Term();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD_OP:
    case SUB_OP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD_OP:{
        jj_consume_token(ADD_OP);
        e = Exp();
{if ("" != null) return new ASTPlus(t,e);}
        break;
        }
      case SUB_OP:{
        jj_consume_token(SUB_OP);
        e = Exp();
{if ("" != null) return new ASTSub(t,e);}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {ASTNode f,e;
        Token t;
    f = Fact();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL_OP:
    case DIV_OP:
    case DOT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL_OP:{
        jj_consume_token(MUL_OP);
        e = Term();
{if ("" != null) return new ASTMult(f, e);}
        break;
        }
      case DIV_OP:{
        jj_consume_token(DIV_OP);
        e = Term();
{if ("" != null) return new ASTDiv(f, e);}
        break;
        }
      case DOT:{
        jj_consume_token(DOT);
        t = jj_consume_token(Id);
{if ("" != null) return new ASTField(f,t.image);}
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {ASTNode e, e2, e3 = null;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEREF:{
      jj_consume_token(DEREF);
      e = Fact();
{if ("" != null) return new ASTDeref(e);}
      break;
      }
    case SUB_OP:{
      jj_consume_token(SUB_OP);
      e = Fact();
{if ("" != null) return new ASTNegative(e);}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      e = SExp();
      jj_consume_token(THEN);
      e2 = SExp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        e3 = SExp();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(END);
{if ("" != null) return new ASTIf(e,e2,e3);}
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      e = SExp();
      jj_consume_token(DO);
      e2 = SExp();
      jj_consume_token(END);
{if ("" != null) return new ASTWhile(e,e2);}
      break;
      }
    case DECL:{
      jj_consume_token(DECL);
LinkedList<String> listIds = new LinkedList<String>();
                LinkedList<ASTNode> initExps = new LinkedList<ASTNode>();
      label_1:
      while (true) {
        t = jj_consume_token(Id);
        jj_consume_token(EQUALS_DEF);
        e = LExp();
listIds.add(t.image); initExps.add(e);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Id:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(IN);
      e = SExp();
      jj_consume_token(END);
{if ("" != null) return new ASTDecl(listIds,initExps, e);}
      break;
      }
    case TRUE:
    case FALSE:
    case Id:
    case Num:
    case LPAR:{
      e = SFact();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:
      case QUESTION_MARK:{
        e = CFact(e);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
{if ("" != null) return e;}
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      e = Fact();
{if ("" != null) return new ASTNew(e);}
      break;
      }
    case FUN:{
      jj_consume_token(FUN);
LinkedList<String> args = new LinkedList<String>();
                LinkedList<Type> types = new LinkedList<Type>();
                Type ty;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Id:{
        t = jj_consume_token(Id);
        jj_consume_token(COLON);
        ty = Type();
args.add(t.image); types.add(ty);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(Id);
          jj_consume_token(COLON);
          ty = Type();
args.add(t.image); types.add(ty);
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(ARROW);
      e = SExp();
      jj_consume_token(END);
{if ("" != null) return new ASTFunction(args, types, e);}
      break;
      }
    case BRACKET_L:{
      jj_consume_token(BRACKET_L);
LinkedList<String> fields = new LinkedList<String>(); LinkedList<ASTNode> vExps = new LinkedList<ASTNode>();
      t = jj_consume_token(Id);
      jj_consume_token(EQUALS_DEF);
      e = LExp();
fields.add(t.image); vExps.add(e);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(Id);
        jj_consume_token(EQUALS_DEF);
        e = LExp();
fields.add(t.image); vExps.add(e);
      }
      jj_consume_token(BRACKET_R);
{if ("" != null) return new ASTRecord(fields, vExps);}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SFact() throws ParseException {Token t;
        ASTNode e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      t = jj_consume_token(Num);
{if ("" != null) return new ASTNum(Integer.parseInt(t.image));}
      break;
      }
    case Id:{
      t = jj_consume_token(Id);
{if ("" != null) return new ASTIdentifier(t.image);}
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      e = SExp();
      jj_consume_token(RPAR);
{if ("" != null) return e;}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new ASTLiteral(true);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new ASTLiteral(false);}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode CFact(ASTNode sfact) throws ParseException {ASTNode e, e2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
LinkedList<ASTNode> args = new LinkedList<ASTNode>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECL:
      case NEW:
      case TRUE:
      case FALSE:
      case PRINT:
      case PRINTLN:
      case IF:
      case WHILE:
      case FUN:
      case Id:
      case Num:
      case LPAR:
      case SUB_OP:
      case NOT:
      case DEREF:
      case BRACKET_L:{
        e = LExp();
args.add(e);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          e = LExp();
args.add(e);
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
{if ("" != null) return new ASTApply(sfact,args);}
      break;
      }
    case QUESTION_MARK:{
      jj_consume_token(QUESTION_MARK);
      e = SExp();
      jj_consume_token(COLON);
      e2 = Fact();
{if ("" != null) return new ASTConditionalValue(sfact, e,e2);}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {Type ty;
        Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOL:{
      jj_consume_token(BOOL);
{if ("" != null) return new TypeBool();}
      break;
      }
    case INT:{
      jj_consume_token(INT);
{if ("" != null) return new TypeInt();}
      break;
      }
    case REF:{
      jj_consume_token(REF);
      ty = Type();
{if ("" != null) return new TypeReference(ty);}
      break;
      }
    case CMD:{
      jj_consume_token(CMD);
{if ("" != null) return new TypeCmd();}
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
LinkedList<Type> types = new LinkedList<Type>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOL:
      case REF:
      case CMD:
      case LPAR:
      case BRACKET_L:{
        ty = Type();
types.add(ty);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          ty = Type();
types.add(ty);
        }
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(ARROW);
      ty = Type();
      jj_consume_token(RPAR);
{if ("" != null) return new TypeFunction(types,ty);}
      break;
      }
    case BRACKET_L:{
      jj_consume_token(BRACKET_L);
LinkedList<String> fields = new LinkedList<String>(); LinkedList<Type> types = new LinkedList<Type>();
      tok = jj_consume_token(Id);
      jj_consume_token(COLON);
      ty = Type();
fields.add(tok.image); types.add(ty);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        tok = jj_consume_token(Id);
        jj_consume_token(COLON);
        ty = Type();
fields.add(tok.image); types.add(ty);
      }
      jj_consume_token(BRACKET_R);
{if ("" != null) return new TypeRecord(fields, types);}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x13853ea0,0x0,0x138526a0,0x80000000,0x80000000,0x18000000,0x18000000,0x60000000,0x60000000,0x8000,0x800000,0x2000000,0x0,0x800000,0x0,0x138526a0,0x3800600,0x0,0x13853ea0,0x2000000,0x0,0x2780000,0x0,0x2780000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x200,0x40,0x10480,0x20,0x10480,0x1f,0x1f,0x0,0x0,0x40000,0x40000,0x0,0x0,0x80000,0x4000,0x0,0x4000,0x10400,0x0,0x4000,0x10480,0x80000,0x4000,0x10000,0x4000,0x10000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
